# .github/workflows/publish-rust.yml
name: Publish Rust crates to GitHub Packages

on:
  workflow_dispatch: {}
  push:
    tags:
      - "v*.*.*"     # publica cuando subas un tag semántico

permissions:
  contents: read
  packages: write   # necesario para publicar a GitHub Packages

env:
  CARGO_TERM_COLOR: always
  # Cargo usará este token para autenticar contra el registry "github"
  CARGO_REGISTRIES_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build workspace (sanity)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure Cargo (local patch to avoid network for core)
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'EOF'
          [registries]
          github = { index = "sparse+https://pkgs.github.com/RodolfoDevApp/index/" }

          # IMPORTANTE: este archivo vive en el repo => path relativo al repo
          [patch.github]
          eventshop-messaging-core = { path = "eventshop-messaging-core" }
          EOF
          echo "== .cargo/config.toml ====================="
          cat .cargo/config.toml
          echo "=========================================="

      - name: Build workspace
        run: cargo build --workspace --all-targets --verbose

  publish:
    name: Publish crates (core -> rabbitmq)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure Cargo (registry only)
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'EOF'
          [registries]
          github = { index = "sparse+https://pkgs.github.com/RodolfoDevApp/index/" }
          EOF
          echo "== .cargo/config.toml (publish) =========="
          cat .cargo/config.toml
          echo "=========================================="

      # 1) Publica el core primero
      - name: Publish core
        run: cargo publish -p eventshop-messaging-core --registry github

      # Espera a que el index de GitHub Packages se actualice
      - name: Wait for index to update
        run: sleep 40

      # 2) Publica el adaptador de RabbitMQ que depende del core ya publicado
      - name: Publish rabbitmq
        run: cargo publish -p eventshop-messaging-rabbitmq --registry github
