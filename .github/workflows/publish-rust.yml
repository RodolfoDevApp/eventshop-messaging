name: Publish Rust crates

on:
  workflow_dispatch: {}           # correr manualmente
  push:
    tags:
      - "v*.*.*"                  # o cuando crees un tag, ej.: v0.1.0

permissions:
  contents: read
  packages: write                 # necesario para publicar en GitHub Packages

env:
  REG_NAME: github
  REG_INDEX: sparse+https://pkgs.github.com/RodolfoDevApp/index/

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Configure Cargo registry (github)
        run: |
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [registries]
          ${REG_NAME} = { index = "${REG_INDEX}" }
          EOF

      # IMPORTANT: usa un PAT guardado como secreto (ver pasos abajo)
      - name: Set Cargo token
        run: echo "CARGO_REGISTRIES_${REG_NAME^^}_TOKEN=${{ secrets.CRATES_GH_PAT }}" >> $GITHUB_ENV

      - name: Check format
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build --workspace --release

      # Publica primero el core
      - name: Publish core
        run: cargo publish -p eventshop-messaging-core --registry ${REG_NAME}

      # Espacio corto para que el indice se actualice
      - name: Wait a bit
        run: sleep 15

      # Luego el adaptador RabbitMQ (depende del core)
      - name: Publish rabbitmq
        run: cargo publish -p eventshop-messaging-rabbitmq --registry ${REG_NAME}
